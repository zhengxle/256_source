/* NOTE: start of $Id: argv_web.h.3,v 1.1 1998/10/13 20:08:59 gray Exp $ */

/*<<<<<<<<<<  The below prototypes are auto-generated by fillproto */

/*
 * int argv_web_process_string
 *
 * DESCRIPTION:
 *
 * Processes arguments sent in via a string that a web-server might
 * send to program.  We divide up the string using a supplied
 * delimiters string.
 *
 * WARNING: you cannot use argv_copy_args after this is called because
 * a temporary grid is created.
 *
 * RETURNS:
 *
 * Success - 0
 *
 * Failure - -1
 *
 * ARGUMENTS:
 *
 * args - Array of argv_t structures.
 *
 * arg0 - Argument 0 which will be used in various error messages.
 *
 * string - Web string that we are processing.
 *
 * delim - Delimiter string to divide up the tokens in string.
 * QUERY_STRING and POST processing should have "&" while PATH_INFO
 * should have "/".  You may want to add "=" if you use arg=value type
 * of arguments.  The '=' delimiter is treated as special so //x=//
 * will strip the extra /'s in a row but will create a null argument
 * for x.
 */
extern
int	argv_web_process_string(argv_t *args, const char *arg0,
				const char *string, const char *delim);

/*
 * int argv_web_process
 *
 * DESCRIPTION:
 *
 * Processes arguments sent in via the QUERY_STRING environmental
 * variable that a web-server might send to program in ARG0.
 *
 * RETURNS:
 *
 * Success - 0
 *
 * Failure - -1
 *
 * ARGUMENTS:
 *
 * args - Array of argv_t structures.
 *
 * sd - Socket descriptor we should read from if this is a POST
 * operation.  For most programs, this should probably be set to the
 * number of STDIN which is 0.
 *
 * arg0 - Argument 0 which will be used in various error messages.
 */
extern
int	argv_web_process(argv_t *args, const int sd, const char *arg0);

/*<<<<<<<<<<   This is end of the auto-generated output from fillproto. */

#endif /* ! __ARGV_WEB_H__ */
